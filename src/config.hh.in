/**
 * @file config.hh
 * @author Reinaldo Silva
 * @version 1.0
 * @date 2013
 * @copyright Copyright 2013 Produban. All rights reserved.
 * @copyright Licensed under the Apache License, Version 2.0
 * @copyright http://www.apache.org/licenses/LICENSE-2.0
 */

/*
 * Copyright 2013 Produban
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#ifndef _LOG2KAFKA_HH_
#define _LOG2KAFKA_HH_

#define BUILD_NAME "@CMAKE_PROJECT_NAME@"
#define @CMAKE_PROJECT_NAME@_VERSION_MAJOR @TARGET_VERSION_MAJOR@
#define @CMAKE_PROJECT_NAME@_VERSION_MINOR @TARGET_VERSION_MINOR@
#define @CMAKE_PROJECT_NAME@_VERSION "@TARGET_VERSION@"

#cmakedefine _LOG2KAFKA_USE_LOG4CXX_

#include <csignal>
#include <iostream>
#include <string>

#include <boost/program_options.hpp>

#if BOOST_VERSION >= 104600
#define BOOST_FILESYSTEM_V3
#endif

#if defined _LOG2KAFKA_USE_LOG4CXX_

#include <log4cxx/logger.h>
#include <log4cxx/basicconfigurator.h>
#include <log4cxx/propertyconfigurator.h>
#include <log4cxx/helpers/exception.h>

#define LOG_TRACE(m) LOG4CXX_TRACE(logger, m)
#define LOG_DEBUG(m) LOG4CXX_DEBUG(logger, m)
#define LOG_INFO(m) LOG4CXX_INFO(logger, m)
#define LOG_WARN(m) LOG4CXX_WARN(logger, m)
#define LOG_ERROR(m) LOG4CXX_ERROR(logger, m)
#define LOG_FATAL(m) LOG4CXX_FATAL(logger, m)

#else

#ifdef NDEBUG

#define LOG_TRACE(m)
#define LOG_DEBUG(m)

#else

#define LOG_TRACE(m) if (Constants::LOG_VERBOSITY) { cout << "TRACE: " << m << endl; }
#define LOG_DEBUG(m) if (Constants::LOG_VERBOSITY) { cout << "DEBUG: " << m << endl; }

#endif /*NDEBUG */

#define LOG_INFO(m) if (Constants::LOG_VERBOSITY) { cout << "INFO: " << m << endl; }
#define LOG_WARN(m) if (Constants::LOG_VERBOSITY) { cout << "WARN: " << m << endl; }
#define LOG_ERROR(m) cerr << "ERROR: " << m << endl
#define LOG_FATAL(m) cerr << "FATAL: " << m << endl

#endif /*_LOG2KAFKA_USE_LOG4CXX_ */

#include "Constants.hh"
#include "Exceptions.hh"

#endif /* _LOG2KAFKA_HH_ */
